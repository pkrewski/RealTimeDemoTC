/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.truecaller.logging.kafka.events;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class search_record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"search_record\",\"namespace\":\"com.truecaller.logging.kafka.events\",\"fields\":[{\"name\":\"action\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"query_country_code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sources\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null},{\"name\":\"spam_reports_num\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"search_string\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"num_user_connecting\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"result_size\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence action;
  @Deprecated public java.lang.CharSequence query_country_code;
  @Deprecated public java.util.List<java.lang.CharSequence> sources;
  @Deprecated public java.lang.Integer spam_reports_num;
  @Deprecated public java.lang.CharSequence search_string;
  @Deprecated public java.lang.Integer num_user_connecting;
  @Deprecated public java.lang.Integer result_size;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public search_record() {}

  /**
   * All-args constructor.
   */
  public search_record(java.lang.CharSequence action, java.lang.CharSequence query_country_code, java.util.List<java.lang.CharSequence> sources, java.lang.Integer spam_reports_num, java.lang.CharSequence search_string, java.lang.Integer num_user_connecting, java.lang.Integer result_size) {
    this.action = action;
    this.query_country_code = query_country_code;
    this.sources = sources;
    this.spam_reports_num = spam_reports_num;
    this.search_string = search_string;
    this.num_user_connecting = num_user_connecting;
    this.result_size = result_size;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return action;
    case 1: return query_country_code;
    case 2: return sources;
    case 3: return spam_reports_num;
    case 4: return search_string;
    case 5: return num_user_connecting;
    case 6: return result_size;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: action = (java.lang.CharSequence)value$; break;
    case 1: query_country_code = (java.lang.CharSequence)value$; break;
    case 2: sources = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: spam_reports_num = (java.lang.Integer)value$; break;
    case 4: search_string = (java.lang.CharSequence)value$; break;
    case 5: num_user_connecting = (java.lang.Integer)value$; break;
    case 6: result_size = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'action' field.
   */
  public java.lang.CharSequence getAction() {
    return action;
  }

  /**
   * Sets the value of the 'action' field.
   * @param value the value to set.
   */
  public void setAction(java.lang.CharSequence value) {
    this.action = value;
  }

  /**
   * Gets the value of the 'query_country_code' field.
   */
  public java.lang.CharSequence getQueryCountryCode() {
    return query_country_code;
  }

  /**
   * Sets the value of the 'query_country_code' field.
   * @param value the value to set.
   */
  public void setQueryCountryCode(java.lang.CharSequence value) {
    this.query_country_code = value;
  }

  /**
   * Gets the value of the 'sources' field.
   */
  public java.util.List<java.lang.CharSequence> getSources() {
    return sources;
  }

  /**
   * Sets the value of the 'sources' field.
   * @param value the value to set.
   */
  public void setSources(java.util.List<java.lang.CharSequence> value) {
    this.sources = value;
  }

  /**
   * Gets the value of the 'spam_reports_num' field.
   */
  public java.lang.Integer getSpamReportsNum() {
    return spam_reports_num;
  }

  /**
   * Sets the value of the 'spam_reports_num' field.
   * @param value the value to set.
   */
  public void setSpamReportsNum(java.lang.Integer value) {
    this.spam_reports_num = value;
  }

  /**
   * Gets the value of the 'search_string' field.
   */
  public java.lang.CharSequence getSearchString() {
    return search_string;
  }

  /**
   * Sets the value of the 'search_string' field.
   * @param value the value to set.
   */
  public void setSearchString(java.lang.CharSequence value) {
    this.search_string = value;
  }

  /**
   * Gets the value of the 'num_user_connecting' field.
   */
  public java.lang.Integer getNumUserConnecting() {
    return num_user_connecting;
  }

  /**
   * Sets the value of the 'num_user_connecting' field.
   * @param value the value to set.
   */
  public void setNumUserConnecting(java.lang.Integer value) {
    this.num_user_connecting = value;
  }

  /**
   * Gets the value of the 'result_size' field.
   */
  public java.lang.Integer getResultSize() {
    return result_size;
  }

  /**
   * Sets the value of the 'result_size' field.
   * @param value the value to set.
   */
  public void setResultSize(java.lang.Integer value) {
    this.result_size = value;
  }

  /** Creates a new search_record RecordBuilder */
  public static com.truecaller.logging.kafka.events.search_record.Builder newBuilder() {
    return new com.truecaller.logging.kafka.events.search_record.Builder();
  }
  
  /** Creates a new search_record RecordBuilder by copying an existing Builder */
  public static com.truecaller.logging.kafka.events.search_record.Builder newBuilder(com.truecaller.logging.kafka.events.search_record.Builder other) {
    return new com.truecaller.logging.kafka.events.search_record.Builder(other);
  }
  
  /** Creates a new search_record RecordBuilder by copying an existing search_record instance */
  public static com.truecaller.logging.kafka.events.search_record.Builder newBuilder(com.truecaller.logging.kafka.events.search_record other) {
    return new com.truecaller.logging.kafka.events.search_record.Builder(other);
  }
  
  /**
   * RecordBuilder for search_record instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<search_record>
    implements org.apache.avro.data.RecordBuilder<search_record> {

    private java.lang.CharSequence action;
    private java.lang.CharSequence query_country_code;
    private java.util.List<java.lang.CharSequence> sources;
    private java.lang.Integer spam_reports_num;
    private java.lang.CharSequence search_string;
    private java.lang.Integer num_user_connecting;
    private java.lang.Integer result_size;

    /** Creates a new Builder */
    private Builder() {
      super(com.truecaller.logging.kafka.events.search_record.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.truecaller.logging.kafka.events.search_record.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.action)) {
        this.action = data().deepCopy(fields()[0].schema(), other.action);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.query_country_code)) {
        this.query_country_code = data().deepCopy(fields()[1].schema(), other.query_country_code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sources)) {
        this.sources = data().deepCopy(fields()[2].schema(), other.sources);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.spam_reports_num)) {
        this.spam_reports_num = data().deepCopy(fields()[3].schema(), other.spam_reports_num);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.search_string)) {
        this.search_string = data().deepCopy(fields()[4].schema(), other.search_string);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.num_user_connecting)) {
        this.num_user_connecting = data().deepCopy(fields()[5].schema(), other.num_user_connecting);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.result_size)) {
        this.result_size = data().deepCopy(fields()[6].schema(), other.result_size);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing search_record instance */
    private Builder(com.truecaller.logging.kafka.events.search_record other) {
            super(com.truecaller.logging.kafka.events.search_record.SCHEMA$);
      if (isValidValue(fields()[0], other.action)) {
        this.action = data().deepCopy(fields()[0].schema(), other.action);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.query_country_code)) {
        this.query_country_code = data().deepCopy(fields()[1].schema(), other.query_country_code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sources)) {
        this.sources = data().deepCopy(fields()[2].schema(), other.sources);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.spam_reports_num)) {
        this.spam_reports_num = data().deepCopy(fields()[3].schema(), other.spam_reports_num);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.search_string)) {
        this.search_string = data().deepCopy(fields()[4].schema(), other.search_string);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.num_user_connecting)) {
        this.num_user_connecting = data().deepCopy(fields()[5].schema(), other.num_user_connecting);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.result_size)) {
        this.result_size = data().deepCopy(fields()[6].schema(), other.result_size);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'action' field */
    public java.lang.CharSequence getAction() {
      return action;
    }
    
    /** Sets the value of the 'action' field */
    public com.truecaller.logging.kafka.events.search_record.Builder setAction(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.action = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'action' field has been set */
    public boolean hasAction() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'action' field */
    public com.truecaller.logging.kafka.events.search_record.Builder clearAction() {
      action = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'query_country_code' field */
    public java.lang.CharSequence getQueryCountryCode() {
      return query_country_code;
    }
    
    /** Sets the value of the 'query_country_code' field */
    public com.truecaller.logging.kafka.events.search_record.Builder setQueryCountryCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.query_country_code = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'query_country_code' field has been set */
    public boolean hasQueryCountryCode() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'query_country_code' field */
    public com.truecaller.logging.kafka.events.search_record.Builder clearQueryCountryCode() {
      query_country_code = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'sources' field */
    public java.util.List<java.lang.CharSequence> getSources() {
      return sources;
    }
    
    /** Sets the value of the 'sources' field */
    public com.truecaller.logging.kafka.events.search_record.Builder setSources(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.sources = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'sources' field has been set */
    public boolean hasSources() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'sources' field */
    public com.truecaller.logging.kafka.events.search_record.Builder clearSources() {
      sources = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'spam_reports_num' field */
    public java.lang.Integer getSpamReportsNum() {
      return spam_reports_num;
    }
    
    /** Sets the value of the 'spam_reports_num' field */
    public com.truecaller.logging.kafka.events.search_record.Builder setSpamReportsNum(java.lang.Integer value) {
      validate(fields()[3], value);
      this.spam_reports_num = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'spam_reports_num' field has been set */
    public boolean hasSpamReportsNum() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'spam_reports_num' field */
    public com.truecaller.logging.kafka.events.search_record.Builder clearSpamReportsNum() {
      spam_reports_num = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'search_string' field */
    public java.lang.CharSequence getSearchString() {
      return search_string;
    }
    
    /** Sets the value of the 'search_string' field */
    public com.truecaller.logging.kafka.events.search_record.Builder setSearchString(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.search_string = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'search_string' field has been set */
    public boolean hasSearchString() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'search_string' field */
    public com.truecaller.logging.kafka.events.search_record.Builder clearSearchString() {
      search_string = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'num_user_connecting' field */
    public java.lang.Integer getNumUserConnecting() {
      return num_user_connecting;
    }
    
    /** Sets the value of the 'num_user_connecting' field */
    public com.truecaller.logging.kafka.events.search_record.Builder setNumUserConnecting(java.lang.Integer value) {
      validate(fields()[5], value);
      this.num_user_connecting = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'num_user_connecting' field has been set */
    public boolean hasNumUserConnecting() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'num_user_connecting' field */
    public com.truecaller.logging.kafka.events.search_record.Builder clearNumUserConnecting() {
      num_user_connecting = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'result_size' field */
    public java.lang.Integer getResultSize() {
      return result_size;
    }
    
    /** Sets the value of the 'result_size' field */
    public com.truecaller.logging.kafka.events.search_record.Builder setResultSize(java.lang.Integer value) {
      validate(fields()[6], value);
      this.result_size = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'result_size' field has been set */
    public boolean hasResultSize() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'result_size' field */
    public com.truecaller.logging.kafka.events.search_record.Builder clearResultSize() {
      result_size = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public search_record build() {
      try {
        search_record record = new search_record();
        record.action = fieldSetFlags()[0] ? this.action : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.query_country_code = fieldSetFlags()[1] ? this.query_country_code : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sources = fieldSetFlags()[2] ? this.sources : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.spam_reports_num = fieldSetFlags()[3] ? this.spam_reports_num : (java.lang.Integer) defaultValue(fields()[3]);
        record.search_string = fieldSetFlags()[4] ? this.search_string : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.num_user_connecting = fieldSetFlags()[5] ? this.num_user_connecting : (java.lang.Integer) defaultValue(fields()[5]);
        record.result_size = fieldSetFlags()[6] ? this.result_size : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
