/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.truecaller.logging.kafka.events;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class user_record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"user_record\",\"namespace\":\"com.truecaller.logging.kafka.events\",\"fields\":[{\"name\":\"register_id\",\"type\":\"long\"},{\"name\":\"country_code\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long register_id;
  @Deprecated public java.lang.CharSequence country_code;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public user_record() {}

  /**
   * All-args constructor.
   */
  public user_record(java.lang.Long register_id, java.lang.CharSequence country_code) {
    this.register_id = register_id;
    this.country_code = country_code;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return register_id;
    case 1: return country_code;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: register_id = (java.lang.Long)value$; break;
    case 1: country_code = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'register_id' field.
   */
  public java.lang.Long getRegisterId() {
    return register_id;
  }

  /**
   * Sets the value of the 'register_id' field.
   * @param value the value to set.
   */
  public void setRegisterId(java.lang.Long value) {
    this.register_id = value;
  }

  /**
   * Gets the value of the 'country_code' field.
   */
  public java.lang.CharSequence getCountryCode() {
    return country_code;
  }

  /**
   * Sets the value of the 'country_code' field.
   * @param value the value to set.
   */
  public void setCountryCode(java.lang.CharSequence value) {
    this.country_code = value;
  }

  /** Creates a new user_record RecordBuilder */
  public static com.truecaller.logging.kafka.events.user_record.Builder newBuilder() {
    return new com.truecaller.logging.kafka.events.user_record.Builder();
  }
  
  /** Creates a new user_record RecordBuilder by copying an existing Builder */
  public static com.truecaller.logging.kafka.events.user_record.Builder newBuilder(com.truecaller.logging.kafka.events.user_record.Builder other) {
    return new com.truecaller.logging.kafka.events.user_record.Builder(other);
  }
  
  /** Creates a new user_record RecordBuilder by copying an existing user_record instance */
  public static com.truecaller.logging.kafka.events.user_record.Builder newBuilder(com.truecaller.logging.kafka.events.user_record other) {
    return new com.truecaller.logging.kafka.events.user_record.Builder(other);
  }
  
  /**
   * RecordBuilder for user_record instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<user_record>
    implements org.apache.avro.data.RecordBuilder<user_record> {

    private long register_id;
    private java.lang.CharSequence country_code;

    /** Creates a new Builder */
    private Builder() {
      super(com.truecaller.logging.kafka.events.user_record.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.truecaller.logging.kafka.events.user_record.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.register_id)) {
        this.register_id = data().deepCopy(fields()[0].schema(), other.register_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.country_code)) {
        this.country_code = data().deepCopy(fields()[1].schema(), other.country_code);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing user_record instance */
    private Builder(com.truecaller.logging.kafka.events.user_record other) {
            super(com.truecaller.logging.kafka.events.user_record.SCHEMA$);
      if (isValidValue(fields()[0], other.register_id)) {
        this.register_id = data().deepCopy(fields()[0].schema(), other.register_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.country_code)) {
        this.country_code = data().deepCopy(fields()[1].schema(), other.country_code);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'register_id' field */
    public java.lang.Long getRegisterId() {
      return register_id;
    }
    
    /** Sets the value of the 'register_id' field */
    public com.truecaller.logging.kafka.events.user_record.Builder setRegisterId(long value) {
      validate(fields()[0], value);
      this.register_id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'register_id' field has been set */
    public boolean hasRegisterId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'register_id' field */
    public com.truecaller.logging.kafka.events.user_record.Builder clearRegisterId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'country_code' field */
    public java.lang.CharSequence getCountryCode() {
      return country_code;
    }
    
    /** Sets the value of the 'country_code' field */
    public com.truecaller.logging.kafka.events.user_record.Builder setCountryCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.country_code = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'country_code' field has been set */
    public boolean hasCountryCode() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'country_code' field */
    public com.truecaller.logging.kafka.events.user_record.Builder clearCountryCode() {
      country_code = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public user_record build() {
      try {
        user_record record = new user_record();
        record.register_id = fieldSetFlags()[0] ? this.register_id : (java.lang.Long) defaultValue(fields()[0]);
        record.country_code = fieldSetFlags()[1] ? this.country_code : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
