/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.truecaller.logging.kafka.events;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class upload_contact_record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"upload_contact_record\",\"namespace\":\"com.truecaller.logging.kafka.events\",\"fields\":[{\"name\":\"phone\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"social_ids\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence phone;
  @Deprecated public java.lang.CharSequence country;
  @Deprecated public java.util.List<java.lang.CharSequence> social_ids;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public upload_contact_record() {}

  /**
   * All-args constructor.
   */
  public upload_contact_record(java.lang.CharSequence phone, java.lang.CharSequence country, java.util.List<java.lang.CharSequence> social_ids) {
    this.phone = phone;
    this.country = country;
    this.social_ids = social_ids;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return phone;
    case 1: return country;
    case 2: return social_ids;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: phone = (java.lang.CharSequence)value$; break;
    case 1: country = (java.lang.CharSequence)value$; break;
    case 2: social_ids = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'phone' field.
   */
  public java.lang.CharSequence getPhone() {
    return phone;
  }

  /**
   * Sets the value of the 'phone' field.
   * @param value the value to set.
   */
  public void setPhone(java.lang.CharSequence value) {
    this.phone = value;
  }

  /**
   * Gets the value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'social_ids' field.
   */
  public java.util.List<java.lang.CharSequence> getSocialIds() {
    return social_ids;
  }

  /**
   * Sets the value of the 'social_ids' field.
   * @param value the value to set.
   */
  public void setSocialIds(java.util.List<java.lang.CharSequence> value) {
    this.social_ids = value;
  }

  /** Creates a new upload_contact_record RecordBuilder */
  public static com.truecaller.logging.kafka.events.upload_contact_record.Builder newBuilder() {
    return new com.truecaller.logging.kafka.events.upload_contact_record.Builder();
  }
  
  /** Creates a new upload_contact_record RecordBuilder by copying an existing Builder */
  public static com.truecaller.logging.kafka.events.upload_contact_record.Builder newBuilder(com.truecaller.logging.kafka.events.upload_contact_record.Builder other) {
    return new com.truecaller.logging.kafka.events.upload_contact_record.Builder(other);
  }
  
  /** Creates a new upload_contact_record RecordBuilder by copying an existing upload_contact_record instance */
  public static com.truecaller.logging.kafka.events.upload_contact_record.Builder newBuilder(com.truecaller.logging.kafka.events.upload_contact_record other) {
    return new com.truecaller.logging.kafka.events.upload_contact_record.Builder(other);
  }
  
  /**
   * RecordBuilder for upload_contact_record instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<upload_contact_record>
    implements org.apache.avro.data.RecordBuilder<upload_contact_record> {

    private java.lang.CharSequence phone;
    private java.lang.CharSequence country;
    private java.util.List<java.lang.CharSequence> social_ids;

    /** Creates a new Builder */
    private Builder() {
      super(com.truecaller.logging.kafka.events.upload_contact_record.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.truecaller.logging.kafka.events.upload_contact_record.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.phone)) {
        this.phone = data().deepCopy(fields()[0].schema(), other.phone);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.country)) {
        this.country = data().deepCopy(fields()[1].schema(), other.country);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.social_ids)) {
        this.social_ids = data().deepCopy(fields()[2].schema(), other.social_ids);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing upload_contact_record instance */
    private Builder(com.truecaller.logging.kafka.events.upload_contact_record other) {
            super(com.truecaller.logging.kafka.events.upload_contact_record.SCHEMA$);
      if (isValidValue(fields()[0], other.phone)) {
        this.phone = data().deepCopy(fields()[0].schema(), other.phone);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.country)) {
        this.country = data().deepCopy(fields()[1].schema(), other.country);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.social_ids)) {
        this.social_ids = data().deepCopy(fields()[2].schema(), other.social_ids);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'phone' field */
    public java.lang.CharSequence getPhone() {
      return phone;
    }
    
    /** Sets the value of the 'phone' field */
    public com.truecaller.logging.kafka.events.upload_contact_record.Builder setPhone(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.phone = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'phone' field has been set */
    public boolean hasPhone() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'phone' field */
    public com.truecaller.logging.kafka.events.upload_contact_record.Builder clearPhone() {
      phone = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'country' field */
    public java.lang.CharSequence getCountry() {
      return country;
    }
    
    /** Sets the value of the 'country' field */
    public com.truecaller.logging.kafka.events.upload_contact_record.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.country = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'country' field has been set */
    public boolean hasCountry() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'country' field */
    public com.truecaller.logging.kafka.events.upload_contact_record.Builder clearCountry() {
      country = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'social_ids' field */
    public java.util.List<java.lang.CharSequence> getSocialIds() {
      return social_ids;
    }
    
    /** Sets the value of the 'social_ids' field */
    public com.truecaller.logging.kafka.events.upload_contact_record.Builder setSocialIds(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.social_ids = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'social_ids' field has been set */
    public boolean hasSocialIds() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'social_ids' field */
    public com.truecaller.logging.kafka.events.upload_contact_record.Builder clearSocialIds() {
      social_ids = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public upload_contact_record build() {
      try {
        upload_contact_record record = new upload_contact_record();
        record.phone = fieldSetFlags()[0] ? this.phone : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.country = fieldSetFlags()[1] ? this.country : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.social_ids = fieldSetFlags()[2] ? this.social_ids : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
